// Подключение модуля
var TelegramBot = require('node-telegram-bot-api');
// Подключение конфига
var config = require('./config.json');

// Подключаем бота и указываем, что хотим получать сообщения и тд
var bot = new TelegramBot(config.token, {
	polling: true
});
// Оповещение в консоль об успешном запуске бота
console.log("Бот успешно запущен!");

/*
	#1 Простая функция ответа на заданное слово/команду
*/

bot.onText(/ping/, (msg, match) => {

	var message = "pong!"; //Текст с ответом на команду

	// Отправка сообщения с текстом в переменной message пользователю, который написал боту
	bot.sendMessage(msg.chat.id, message);
  
});

/*
	#1.1 Команда для получения своего ID
*/

//	Данная функция создает команду /id которая выведет ваш ID. Это вам еще пригодится
bot.onText(/\/id/, (msg, match) => {
	bot.sendMessage(msg.chat.id, msg.from.id);
});

/*
	#2 Много команд, используя одну функцию
*/

// Подключим файл, в котором будем хранить образцы сообщений и их ответов
var commands = require('./commands.json');
// Функция, возвращающая присланное боту сообщение и информацию о пользователе
bot.on('message', (msg) => {
	// Создадим массив из ключей (команд, на которые должен отвечать бот)
	var cmd = Object.keys(commands);
	// Проверяем, есть ли присланная пользователем команда, в списке
	// И если она есть - отправляем соответствующий ответ
	// Для более корректной работы нужно заполнять команды в нижнем регистре, чтобы бот сравнивал сообщение от пользователя и команду в одинаковых регистрах
	if(cmd.includes(msg.text.toLowerCase())){
		bot.sendMessage(msg.chat.id, commands[msg.text.toLowerCase()]);
	}
});

/*
	#3 Админ-команды
*/

// Данную команду сможет использовать только админ, который указан в конфиге

// Команда /admin проверяет наличие у вас прав администратора
bot.onText(/\/admin/, (msg, match) => {
	// Проверяем сходится ли ID админа из конфига и ID написавшего пользователя
	if(msg.from.id == config.adminID){
		var message = "Вы администратор!"; 
	}else{
		var message = "Вы обычный пользователь!";
	}

	bot.sendMessage(msg.chat.id, message);
  
});

/*
	#3.1 Поддержка нескольких админов
*/

// Функция, похода на предыдущую, но отличие в том, что может быть больше одного админа

// Команда /madmin идентична первой, только нужна для теста поддержки нескольких админов
bot.onText(/\/madmin/, (msg, match) => {
	
	if(config.admins.includes(msg.from.id)){
		var message = "Вы администратор!"; 
	}else{
		var message = "Вы обычный пользователь!";
	}

	bot.sendMessage(msg.chat.id, message);
  
});

/*
	#4 Пару интересных функций
*/

// Функция возвращает информацию о боте.
// С ее помощью можно, например, выводить в консоль логин бота при запуске или каких-либо обстоятельствах
// Или же отправлять оповещение о запуске бота в телеграм админа
bot.getMe().then(function (value) {
	
	let message = "Запущен бот @" + value['username'];
	// Вариант с логом в консоль
	console.log(message);
	
	// Оповещение админа
	bot.sendMessage(config.adminID, message);

});


// Просто дополнительная информация о функции отправки сообщений
// Возможно указать дополнительные параметры для сообщения такие как: отключение предпросмотра ссылки; markdown; указывать id сообщения, к которому сделать ответ и другие.
var message = "Прочитать больше о параметрах вы можете нажав на эту кнопку -> [🔵](https://core.telegram.org/bots/api#sendmessage)";
bot.sendMessage(config.adminID, message, {
                                            'parse_mode': 'Markdown'
                                            , 'disable_web_page_preview': 'true'
                                        });